---
title: ICN Manifest Use Cases
abbrev: ICNManifestUseCases
docname: draft-wood-icnrg-icnmanifestusecases
date: 2015-11-09
category: info

ipr: trust200902
area: General
workgroup: ICNRG Working Group
keyword: Internet-Draft

stand_alone: yes
pi: [toc, sortrefs, symrefs]

author:
 -
    ins: C. Tschudin
    name: Christian Tschudin
    organization: University of Basel
    email: christian.tschudin@unibas.ch
 -
    ins: C. Westphal
    name: Cerdic Westphal
    org: Huawei
    email: Cedric.Westphal@huawei.com
 -
   ins: C. A. Wood
   name: Christopher A. Wood
   org: PARC
   email: cwood@parc.com

normative:
---  RFC2119:
---  RFC3986:
---  RFC4086:
---  RFC4648:

informative:
---  RFC5389:
---  I-D.ietf-behave-turn:
---  STUNT:
---    target: http://deusty.blogspot.com/2007/09/stunt-out-of-band-channels.html
---    title: STUNT & out-of-band channels
---    author:
---      name: Robbie Hanson
---      ins: R. Hanson
---    date: 2007-09-17
---  I-D.meye* UseCase-xmpp-e2e-encryption:
---  I-D.ietf-xmpp-3920bis:

--- abstract

A catalog of motivating use cases for ICN Manifests is presented.

--- middle

Introduction        {#problems}
============

The purpose of this document is to motivate the design of ICN Manifests and
illustrate several use cases in which they might be used. It is not intended
to specify a standard design, nor is it meant to evaluate existing designs.
The goal is simply to present a set of (non-exhaustive) cases where ICN Manifests
may prove useful for the "network" and "application" layer.

A Minimalist Picture
====================

A manifest is an index used to represent some stream of data. In most cases, this stream
is static and finite, meaning that the manifest simply represents a piece of existing
application data. Immutable Single Object CCNx Manifests, for example, are a particular type of Manifest
that seek to achieve this goal. Logically, a manifest may be perceived as a collection
of pointers to other Content Objects and some additional metadata (TBD), as shown below.

~~~
+---------------+
|   (MANIFEST)  |
|---------------|
|   metadata    |
|---------------|
|   Pointer 1   | ==> +--------------+
|               |     |   (CONTENT)  |
|               |     |   <payload>  |
|               |     +--------------+
|   Pointer 2   | ==> +--------------+
|               |     |   (CONTENT)  |
|               |     |   <payload>  |
|               |     +--------------+
|   Pointer 3   | ==> +---------------+
+---------------+     |   (MANIFEST)  |
                      |---------------|
                      |   Pointer 1   | ==> +--------------+
                      +---------------+     |   (CONTENT)  |
                                            |   <payload>  |
                                            +--------------+
~~~
{: #sample-manifest title="A minimalist representation of an ICN manifest."}

Details about the type and encoding of metadata, the role and usage of Message
pointers, and the types of data that can be represented by a Manifest are ongoing
architectural and design challenges.

# Use Cases

In this section we enumerate possible use cases that could be addressed by Manifests.
This list is not exhaustive, and is open to modification and extension from the
community.

| ID | Network Use Cases        | Application Use Cases       |
| 1 | Amortize verification cost of chunks| Amortize verification cost of chunks|
| 2 | Support network-layer prefetching |  |
| 3 | Store only Content Object metadata (?) | Store only Content Object metadata |
| 4 | Support named and nameless Content Objects | Support named and nameless Content Objects |
| 5 | | Efficiently encode sparse Content Object files with possible compression |
| 6 | Provide alternate sources for a Content Object data blocks (i.e., give more than one routing hint) | |
| 7 | Serve as thunks in Named Function Networking | Serve as thunks in Named Function Networking |
| 8 | Describe the namespace of a particular Content Object | Describe the namespace of a particular Content Object |
| 9 | Store authenticated denial namespace descriptions (see above) | Store authenticated denial namespace descriptions (see above) |
| 10 | Encode different content locator strategies | Encode different traversal strategies for visiting Content Object pointers contained in a Manifest |
| 11 | | Encode parallel forks (file resource forks or property lists associated with a Content Object) |
| 12 | | Support Content Object personalization and internationalization |
| 13 |Group related data together (independent application datum that are typically fetched as a whole) | Group related data together (e.g., for Web page content) |
| 14 | Provide transport-layer information or aid transport protocols | |
| 15 | Facilitate Content Object, service, or entity discovery | |
| 16 | Enable content deletion in routers/forwarders | |
| 17 | | Embed authentication key information (e.g., key catalogs) |
| 18 | | Serve as a database cursor |
| 19 | | Turn the manifest data structure into a block chain (tamperproof open list of records) |
| 20 | | Be used by or as a (decentralized) trusted timestamping service |
| 21 | | Backend storage for a control versioning system, GitHub style |
| 22 | | Encode open-ended data streams (i.e., manifests may point to data not yet in existence) |

Security Considerations
=======================

TODO.

--- back

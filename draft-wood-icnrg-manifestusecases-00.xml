<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.28 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-wood-icnrg-icnmanifestusecases" category="info">

  <front>
    <title abbrev="ICNManifestUseCases">ICN Manifest Use Cases</title>

    <author initials="C." surname="Tschudin" fullname="Christian Tschudin">
      <organization>University of Basel</organization>
      <address>
        <email>christian.tschudin@unibas.ch</email>
      </address>
    </author>
    <author initials="C." surname="Westphal" fullname="Cerdic Westphal">
      <organization>Huawei</organization>
      <address>
        <email>Cedric.Westphal@huawei.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>PARC</organization>
      <address>
        <email>cwood@parc.com</email>
      </address>
    </author>

    <date year="2015" month="November" day="09"/>

    <area>General</area>
    <workgroup>ICNRG Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>A catalog of motivating use cases for ICN Manifests is presented.</t>



    </abstract>


  </front>

  <middle>


<section anchor="problems" title="Introduction">

<t>The purpose of this document is to motivate the design of ICN Manifests and
illustrate several use cases in which they might be used. It is not intended
to specify a standard design, nor is it meant to evaluate existing designs.
The goal is simply to present a set of (non-exhaustive) cases where ICN Manifests
may prove useful for the “network” and “application” layer.</t>

</section>
<section anchor="a-minimalist-picture" title="A Minimalist Picture">

<t>A manifest is a index used to represent some stream of data. In most cases, this stream
is static and finite, meaning that the manifest simply represents a piece of existing
application data. Static CCNx Manifests, for example, are a particular type of Manifest
that seek to achieve this goal. Logically, a manifest may be perceived as a collection
of pointers to other Content Objects and some additional metadata (TBD), as shown below.</t>

<figure title="A minimalist representation of an ICN manifest." anchor="sample-manifest"><artwork><![CDATA[
+---------------+
| TYPE=MANIFEST |
|---------------|
|   metadata    |
|---------------|
|   Pointer 1   | ==> +--------------+
|               |     | TYPE=CONTENT |
|               |     |   <payload>  |
|               |     +--------------+
|   Pointer 2   | ==> +--------------+
|               |     | TYPE=CONTENT |
|               |     |   <payload>  |
|               |     +--------------+
|   Pointer 3   | ==> +---------------+
+---------------+     | TYPE=MANIFEST |
                      |---------------|
                      |   Pointer 1   | ==> +--------------+
                      +---------------+     | TYPE=CONTENT |
                                            |   <payload>  |
                                            +--------------+
]]></artwork></figure>

<t>Details about the type and encoding of metadata, the role and usage of Message
pointers, and the types of data that can be represented by a Manifest are ongoing
architectural and design challenges.</t>

</section>
<section anchor="use-cases" title="Use Cases">

<t>In this section we enumerate possible use cases that could be addressed by Manifests.
This list is not exhaustive, and is open to modification and extension from the
community.</t>

<texttable>
      <ttcol align='left'>ID</ttcol>
      <ttcol align='left'>Network Use Cases</ttcol>
      <ttcol align='left'>Application Use Cases</ttcol>
      <c>1</c>
      <c>&#160;</c>
      <c>&#160;</c>
      <c>2</c>
      <c>Amortize verification cost of chunks</c>
      <c>Amortize verification cost of chunks</c>
      <c>3</c>
      <c>Support network-layer prefetching</c>
      <c>&#160;</c>
      <c>4</c>
      <c>&#160;</c>
      <c>Store only Content Object metadata</c>
      <c>5</c>
      <c>Support named and nameless Content Objects</c>
      <c>Support named and nameless Content Objects</c>
      <c>6</c>
      <c>&#160;</c>
      <c>Efficiently encode sparse Content Object files with possible compression</c>
      <c>7</c>
      <c>Provide alternate sources for a Content Object data blocks (i.e., give more than one routing hint)</c>
      <c>&#160;</c>
      <c>8</c>
      <c>Serve as thunks in Named Function Networking</c>
      <c>Serve as thunks in Named Function Networking</c>
      <c>9</c>
      <c>Describe the namespace of a particular Content Object</c>
      <c>Describe the namespace of a particular Content Object</c>
      <c>10</c>
      <c>Store authenticated denial namespace descriptions (see above)</c>
      <c>Store authenticated denial namespace descriptions (see above)</c>
      <c>11</c>
      <c>&#160;</c>
      <c>Encode different traversal strategies for visiting Content Object pointers contained in a Manifest</c>
      <c>12</c>
      <c>&#160;</c>
      <c>Encode parallel forks (file resource forks or property lists associated with a Content Object)</c>
      <c>13</c>
      <c>Support Content Object personalization and internationalization</c>
      <c>Support Content Object personalization and internationalization</c>
      <c>14</c>
      <c>&#160;</c>
      <c>Group related data together (e.g., for Web page content)</c>
      <c>15</c>
      <c>Provide transport-layer information</c>
      <c>&#160;</c>
      <c>16</c>
      <c>Facilitate Content Object, service, or entity discovery</c>
      <c>&#160;</c>
      <c>17</c>
      <c>Enable content deletion in routers/forwarders</c>
      <c>&#160;</c>
      <c>18</c>
      <c>&#160;</c>
      <c>Embed authentication key information (e.g., key catalogs)</c>
      <c>19</c>
      <c>&#160;</c>
      <c>Serve as database cursor</c>
      <c>20</c>
      <c>&#160;</c>
      <c>Turn the manifest data structure into a block chain (tamperproof open list of records)</c>
      <c>21</c>
      <c>&#160;</c>
      <c>(Decentralized) trusted timestamping</c>
      <c>22</c>
      <c>&#160;</c>
      <c>Backend storage for a control versioning system, GitHub style</c>
      <c>23</c>
      <c>&#160;</c>
      <c>Encode open-ended data streams (i.e., manifests may point to data not yet in existence)</c>
</texttable>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TODO.</t>

</section>


  </middle>

  <back>





  </back>
</rfc>

